version: "3.9"

services:
  postgres:
    image: postgres:14-alpine
    platform: linux/arm64
    container_name: sentry-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: sentry
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentry -d sentry"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    volumes:
      - sentry-postgres:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G

  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: sentry-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - sentry-redis:/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  web:
    image: getsentry/sentry:${SENTRY_VERSION}
    platform: linux/amd64
    container_name: sentry-web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${SENTRY_HTTP_PORT:-9000}:9000"
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: sentry
      SENTRY_DB_HOST: postgres
      SENTRY_DB_PORT: 5432
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: 6379
      SENTRY_SINGLE_ORGANIZATION: "true"
      SENTRY_MAIL_HOST: ${SENTRY_MAIL_HOST:-}
      SENTRY_MAIL_PORT: ${SENTRY_MAIL_PORT:-}
      SENTRY_MAIL_USERNAME: ${SENTRY_MAIL_USERNAME:-}
      SENTRY_MAIL_PASSWORD: ${SENTRY_MAIL_PASSWORD:-}
      SENTRY_SERVER_EMAIL: ${SENTRY_SERVER_EMAIL:-}
      SENTRY_EMAIL_USE_TLS: ${SENTRY_EMAIL_USE_TLS:-false}
      SENTRY_EMAIL_USE_SSL: ${SENTRY_EMAIL_USE_SSL:-false}
      SENTRY_SYSTEM_URL_PREFIX: ${SENTRY_SYSTEM_URL_PREFIX:-http://localhost:9000}
      SENTRY_FEATURES_V2: "1"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000 && echo -e 'GET /_health/ HTTP/1.1\r\nHost: 127.0.0.1\r\n\r\n' >&3 && grep -s -m1 ok <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - sentry-data:/var/lib/sentry/files
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 1.5G

  worker:
    image: getsentry/sentry:${SENTRY_VERSION}
    platform: linux/amd64
    container_name: sentry-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    command: ["sentry", "run", "worker"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: sentry
      SENTRY_DB_HOST: postgres
      SENTRY_DB_PORT: 5432
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: 6379
    healthcheck:
      test: ["CMD", "sentry", "exec", "-c", "from sentry.celery import app; import os; d='celery@{}'.format(os.environ.get('HOSTNAME','')); print(app.control.ping(destination=[d], timeout=5)[0][d]['ok'])"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 1.5G

  cron:
    image: getsentry/sentry:${SENTRY_VERSION}
    platform: linux/amd64
    container_name: sentry-cron
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    command: ["sentry", "run", "cron"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: sentry
      SENTRY_DB_HOST: postgres
      SENTRY_DB_PORT: 5432
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: 6379
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep -q 'celery beat'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 512M

volumes:
  sentry-postgres:
  sentry-redis:
  sentry-data:
